// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package schemas

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LoremFb struct {
	_tab flatbuffers.Table
}

func GetRootAsLoremFb(buf []byte, offset flatbuffers.UOffsetT) *LoremFb {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LoremFb{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LoremFb) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LoremFb) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LoremFb) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoremFb) Data(obj *LoremFbDataMap, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *LoremFb) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *LoremFb) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoremFb) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func LoremFbStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func LoremFbAddId(builder *flatbuffers.Builder, Id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Id), 0)
}
func LoremFbAddData(builder *flatbuffers.Builder, Data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Data), 0)
}
func LoremFbStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LoremFbAddTimestamp(builder *flatbuffers.Builder, Timestamp int64) {
	builder.PrependInt64Slot(2, Timestamp, 0)
}
func LoremFbEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
