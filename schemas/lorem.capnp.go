// Code generated by capnpc-go. DO NOT EDIT.

package schemas

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type LoremCpDataMap struct{ capnp.Struct }

// LoremCpDataMap_TypeID is the unique identifier for the type LoremCpDataMap.
const LoremCpDataMap_TypeID = 0xb2f1181c27849c3d

func NewLoremCpDataMap(s *capnp.Segment) (LoremCpDataMap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return LoremCpDataMap{st}, err
}

func NewRootLoremCpDataMap(s *capnp.Segment) (LoremCpDataMap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return LoremCpDataMap{st}, err
}

func ReadRootLoremCpDataMap(msg *capnp.Message) (LoremCpDataMap, error) {
	root, err := msg.RootPtr()
	return LoremCpDataMap{root.Struct()}, err
}

func (s LoremCpDataMap) String() string {
	str, _ := text.Marshal(0xb2f1181c27849c3d, s.Struct)
	return str
}

func (s LoremCpDataMap) Index() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s LoremCpDataMap) SetIndex(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s LoremCpDataMap) Text() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s LoremCpDataMap) HasText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LoremCpDataMap) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s LoremCpDataMap) SetText(v string) error {
	return s.Struct.SetText(0, v)
}

// LoremCpDataMap_List is a list of LoremCpDataMap.
type LoremCpDataMap_List struct{ capnp.List }

// NewLoremCpDataMap creates a new list of LoremCpDataMap.
func NewLoremCpDataMap_List(s *capnp.Segment, sz int32) (LoremCpDataMap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return LoremCpDataMap_List{l}, err
}

func (s LoremCpDataMap_List) At(i int) LoremCpDataMap { return LoremCpDataMap{s.List.Struct(i)} }

func (s LoremCpDataMap_List) Set(i int, v LoremCpDataMap) error { return s.List.SetStruct(i, v.Struct) }

func (s LoremCpDataMap_List) String() string {
	str, _ := text.MarshalList(0xb2f1181c27849c3d, s.List)
	return str
}

// LoremCpDataMap_Promise is a wrapper for a LoremCpDataMap promised by a client call.
type LoremCpDataMap_Promise struct{ *capnp.Pipeline }

func (p LoremCpDataMap_Promise) Struct() (LoremCpDataMap, error) {
	s, err := p.Pipeline.Struct()
	return LoremCpDataMap{s}, err
}

type LoremCp struct{ capnp.Struct }

// LoremCp_TypeID is the unique identifier for the type LoremCp.
const LoremCp_TypeID = 0xe93d7a8187019733

func NewLoremCp(s *capnp.Segment) (LoremCp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LoremCp{st}, err
}

func NewRootLoremCp(s *capnp.Segment) (LoremCp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LoremCp{st}, err
}

func ReadRootLoremCp(msg *capnp.Message) (LoremCp, error) {
	root, err := msg.RootPtr()
	return LoremCp{root.Struct()}, err
}

func (s LoremCp) String() string {
	str, _ := text.Marshal(0xe93d7a8187019733, s.Struct)
	return str
}

func (s LoremCp) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s LoremCp) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LoremCp) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s LoremCp) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s LoremCp) Data() (LoremCpDataMap_List, error) {
	p, err := s.Struct.Ptr(1)
	return LoremCpDataMap_List{List: p.List()}, err
}

func (s LoremCp) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s LoremCp) SetData(v LoremCpDataMap_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewData sets the data field to a newly
// allocated LoremCpDataMap_List, preferring placement in s's segment.
func (s LoremCp) NewData(n int32) (LoremCpDataMap_List, error) {
	l, err := NewLoremCpDataMap_List(s.Struct.Segment(), n)
	if err != nil {
		return LoremCpDataMap_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s LoremCp) Timestamp() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s LoremCp) SetTimestamp(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// LoremCp_List is a list of LoremCp.
type LoremCp_List struct{ capnp.List }

// NewLoremCp creates a new list of LoremCp.
func NewLoremCp_List(s *capnp.Segment, sz int32) (LoremCp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return LoremCp_List{l}, err
}

func (s LoremCp_List) At(i int) LoremCp { return LoremCp{s.List.Struct(i)} }

func (s LoremCp_List) Set(i int, v LoremCp) error { return s.List.SetStruct(i, v.Struct) }

func (s LoremCp_List) String() string {
	str, _ := text.MarshalList(0xe93d7a8187019733, s.List)
	return str
}

// LoremCp_Promise is a wrapper for a LoremCp promised by a client call.
type LoremCp_Promise struct{ *capnp.Pipeline }

func (p LoremCp_Promise) Struct() (LoremCp, error) {
	s, err := p.Pipeline.Struct()
	return LoremCp{s}, err
}

const schema_b1f92ff2dce1c0d3 = "x\xda\\\x90\xbbJ\x03a\x10\x85\xcf\x99\x7f\xd7X," +
	"&K\x02\x06\x11l\x04/\x10\xef\x95\x10\x08$\x16B" +
	"\x84\x8c`!\x18\xf0\xc7,\x18p\xe3\xa2\x0b\x06;A" +
	"\xf0\x11ll\xf4\x05D\x9f\xc0w\xb0\x13\x1bK\xcb\xd8" +
	"\xa5\x90\x95\x156\x82\xd50\x87\x99\xef\x83S\xb8\xaf\xc9" +
	"\xaa;)\x80\x96\xdd\xb1\xa4zw=7]\x1e<C" +
	"=2y}\xf9x\xffZ\x1e>\xc1e\x0e\xf0\x07o" +
	"\xfew:\x87\x17`\xb2~\xcb\x9b\xab\xcb\xea\xe7\xffK" +
	"\xc9\x01\xc5=>\x14\xdb\xe9Oq\x9f\x8f\xa8$'\xa7" +
	"gA\xb8td%\xeaE\x9b\xcdt\xa9G\x0d\x1b\xdb" +
	"\x1dc\xa3\x16\xa9\xe3\xc6\x01\x1c\x02\xfe\xc2\x1a\xa0\xb3\x86" +
	"\xba\"$KL\xb3\xca\"\xa0\xf3\x86\xba!\x9c\xe9\xf6" +
	":A\x9f\x0e\x84\x0e\x98\x8f\x83~L\x0fB\x0f\x1cY" +
	"\x98Yra\xfd\x17\xef\x8d\xf0[S\x80\xd6\x0c\xb5)" +
	"\xf43\xfev\xcao\x18\xea\xa1\x90R\xa2\x00~{\x17" +
	"\xd0\x03C=\x16\x9an's\xe4;6\xb6\x9c\x00[" +
	"\x86,\xfc\xd5\x05\xa6a\x12w\xc3\xe0<\xb6!\x18\xd1" +
	"\x85\xd0\x05\x7f\x02\x00\x00\xff\xff\x1e\x81N\xdc"

func init() {
	schemas.Register(schema_b1f92ff2dce1c0d3,
		0xb2f1181c27849c3d,
		0xe93d7a8187019733)
}
